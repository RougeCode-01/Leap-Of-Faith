using System.Collections;using UnityEngine;public class AirMovement : MonoBehaviour{    [SerializeField] private float rollForce = 0.5f;    [SerializeField] private float diveSpeed = 5.0f;    [SerializeField] private float drag = 2.0f;    [SerializeField] private float rollCost = 5.0f;    [SerializeField] private float diveCost = 5.0f;    private Rigidbody _rigidbody;    private Controls _controls;    private Stamina _stamina;    private bool _isDiving;    private void Awake()    {        _rigidbody = GetComponent<Rigidbody>();        _stamina = GetComponent<Stamina>();    }    public void Initialize(Controls controls)    {        _controls = controls;    }    public void HandleAirMovement()    {        Roll();        Dive();    }    public void Roll()    {        Vector2 input = _controls.Movement.WASD.ReadValue<Vector2>();        if (input.x != 0 && _stamina.UsingStamina(rollCost))        {            Vector3 dodgeDirection = new Vector3(input.x, 0, 0) * rollForce;            _rigidbody.AddForce(dodgeDirection, ForceMode.Impulse);        }    }    public void Dive()    {        if (_controls.Movement.WASD.ReadValue<Vector2>().y > 0)        {            if (!_isDiving && _stamina.UsingStamina(diveCost))            {                _rigidbody.AddForce(Vector3.down * diveSpeed, ForceMode.Impulse);                _isDiving = true;            }        }        else if (_controls.Movement.WASD.ReadValue<Vector2>().y < 0)        {            if (_isDiving)            {                _rigidbody.drag = drag;                _isDiving = false;                StartCoroutine(ResetDrag());            }        }    }    private IEnumerator ResetDrag()    {        yield return new WaitForSeconds(0.5f);        _rigidbody.drag = 0;    }}