using System.Collections;using UnityEngine;public class AirMovement : MonoBehaviour{    [SerializeField] private float rollForce = 0.5f; // Force applied during roll    [SerializeField] private float diveSpeed = 5.0f; // Speed of the dive    [SerializeField] private float drag = 2.0f; // Drag applied during dive    [SerializeField] private float rollCost = 5.0f; // Stamina cost for rolling    [SerializeField] private float diveCost = 5.0f; // Stamina cost for diving    private Rigidbody _rigidbody; // Reference to the Rigidbody component    private Controls _controls; // Reference to the Controls component    private Stamina _stamina; // Reference to the Stamina component    private bool _isDiving; // Flag to check if the player is diving    private void Awake()    {        // Get the Rigidbody and Stamina components        _rigidbody = GetComponent<Rigidbody>();        _stamina = GetComponent<Stamina>();    }    public void Initialize(Controls controls)    {        // Initialize the controls        _controls = controls;    }    public void HandleAirMovement()    {        // Handle rolling and diving        Roll();        Dive();    }    public void Roll()    {        // Read the input for rolling        float rollInput = _controls.Movement.WASD.ReadValue<Vector2>().x;        // Check if there is input and enough stamina for rolling        if (rollInput != 0 && _stamina.UsingStamina(rollCost))        {            // Calculate the roll angle            float rollAngle = rollInput * rollForce;            // Apply the rotation around the forward axis (z-axis)            transform.Rotate(Vector3.forward, rollAngle);            // Apply a force to push the bird left or right            Vector3 rollForceVector = new Vector3(rollInput * rollForce, 0, 0);            _rigidbody.AddForce(rollForceVector, ForceMode.Impulse);        }    }    public void Dive()    {        // Read the input for diving        if (_controls.Movement.WASD.ReadValue<Vector2>().y < 0)        {            // Check if the player is not already diving and has enough stamina            if (!_isDiving && _stamina.UsingStamina(diveCost))            {                // Apply force for diving and set the diving flag                _rigidbody.AddForce(Vector3.down * diveSpeed, ForceMode.Impulse);                _isDiving = true;            }        }        else if (_controls.Movement.WASD.ReadValue<Vector2>().y > 0)        {            // Check if the player is diving            if (_isDiving)            {                // Apply drag and reset the diving flag                _rigidbody.drag = drag;                _isDiving = false;                StartCoroutine(ResetDrag());            }        }    }    private IEnumerator ResetDrag()    {        // Wait for 0.5 seconds and reset the drag        yield return new WaitForSeconds(0.5f);        _rigidbody.drag = 0;    }}