using System.Collections;using UnityEngine;public class AirMovement : MonoBehaviour{    [SerializeField] private float rollForce = 0.5f;    [SerializeField] private float diveSpeed = 5.0f;    [SerializeField] private float drag = 2.0f; // Drag force for slowing down    [SerializeField] private float rollCost = 5.0f; // Stamina cost for rolling    [SerializeField] private float diveCost = 5.0f; // Stamina cost for diving    private Rigidbody _rigidbody;    private Controls _controls;    private Stamina _stamina;    private bool _isDiving;    private void Awake()    {        // Get the Rigidbody component attached to the GameObject        _rigidbody = GetComponent<Rigidbody>();        _stamina = GetComponent<Stamina>();    }    public void Initialize(Controls controls)    {        // Set the Controls instance        _controls = controls;    }    public void Roll()    {        // Read input from the Controls instance        Vector2 input = _controls.Movement.WASD.ReadValue<Vector2>();        // Check if there is horizontal input for dodging        if (input.x != 0 && _stamina.UsingStamina(rollCost))        {            // Calculate dodge direction (left and right only) and apply dodge speed            Vector3 dodgeDirection = new Vector3(input.x, 0, 0) * rollForce;            // Apply force for dodging (linear force)            _rigidbody.AddForce(dodgeDirection, ForceMode.Impulse);        }    }    public void Dive()    {        // Check if W key is pressed        if (_controls.Movement.WASD.ReadValue<Vector2>().y > 0)        {            if (!_isDiving && _stamina.UsingStamina(diveCost))            {                // Apply downward force for diving                _rigidbody.AddForce(Vector3.down * diveSpeed, ForceMode.Impulse);                _isDiving = true;            }        }        // Check if S key is pressed to stop diving        else if (_controls.Movement.WASD.ReadValue<Vector2>().y < 0)        {            if (_isDiving)            {                // Apply drag force to slow down gradually                _rigidbody.drag = drag;                _isDiving = false;                StartCoroutine(ResetDrag());            }        }    }    private IEnumerator ResetDrag()    {        // Wait for a short duration to simulate gradual slowing down        yield return new WaitForSeconds(0.5f);        // Reset drag to default value        _rigidbody.drag = 0;    }}